// Instructions for standalone (no python) execution:
// (1) download Fiji from the web
// (2) update Fiji once installed
// (3) run this script with something like:
//     /path/to/fiji-linux64 --headless /path/to/this_script.bsh true.tif pred.tif

import trainableSegmentation.metrics.*;
import ij.IJ;
import ij.ImagePlus;

if( bsh.args.length != 5)
{
    print("Error: wrong number of arguments!\n");
    print("Usage: /path/to/fiji-linux64 --headless true.tif pred.tif th_min th_max th_inc");
    return;
}

originalLabels = new ImagePlus(bsh.args[0]);
proposedLabels = new ImagePlus(bsh.args[1]);
th_min = Float.valueOf(bsh.args[2]).floatValue();
th_max = Float.valueOf(bsh.args[3]).floatValue();
th_inc = Float.valueOf(bsh.args[4]).floatValue();

calculateWarpingError = new Boolean(true);

IJ.log("---");
IJ.log("Evaluating segmentation...");
IJ.log("  Original labels: " + originalLabels.getTitle());
IJ.log("  Proposed labels: " + proposedLabels.getTitle() + "\n");

// Calculate segmentation error with the selected metrics
if( calculateWarpingError )
{
    IJ.log("\nCalculating warping error by minimizing splits and mergers...");
    metric = new WarpingError( originalLabels, proposedLabels );
    warpingError = metric.getMinimumSplitsAndMergersErrorValue( th_min, th_max, th_inc, false, 20 );
    IJ.log("  Minimum warping error: " + warpingError);
    IJ.log("  # errors (splits + mergers pixels) = " + Math.round(warpingError * originalLabels.getWidth() * originalLabels.getHeight() * originalLabels.getImageStackSize() ) );
}
